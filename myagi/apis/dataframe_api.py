# coding: utf-8

"""
DataframeApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DataframeApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_module_attempts_dataframe_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_module_attempts_dataframe_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str limit: 
        :param str offset: 
        :param str start_time: 
        :param str module: 
        :param str user: 
        :param str start_time__contains: 
        :param str start_time__day: 
        :param str start_time__endswith: 
        :param str start_time__exact: 
        :param str start_time__gt: 
        :param str start_time__gte: 
        :param str start_time__hour: 
        :param str start_time__icontains: 
        :param str start_time__iendswith: 
        :param str start_time__iexact: 
        :param str start_time__in: 
        :param str start_time__iregex: 
        :param str start_time__isnull: 
        :param str start_time__istartswith: 
        :param str start_time__lt: 
        :param str start_time__lte: 
        :param str start_time__minute: 
        :param str start_time__month: 
        :param str start_time__range: 
        :param str start_time__regex: 
        :param str start_time__search: 
        :param str start_time__second: 
        :param str start_time__startswith: 
        :param str start_time__week_day: 
        :param str start_time__year: 
        :param str module__isnull: 
        :param str user__enrollment_groups: 
        :param str user__learner: 
        :param str user__isnull: 
        :param str user__enrollment_groups__id: 
        :param str user__enrollment_groups__isnull: 
        :param str user__learner__learnergroups: 
        :param str user__learner__isnull: 
        :param str user__enrollment_groups__id__contains: 
        :param str user__enrollment_groups__id__day: 
        :param str user__enrollment_groups__id__endswith: 
        :param str user__enrollment_groups__id__exact: 
        :param str user__enrollment_groups__id__gt: 
        :param str user__enrollment_groups__id__gte: 
        :param str user__enrollment_groups__id__hour: 
        :param str user__enrollment_groups__id__icontains: 
        :param str user__enrollment_groups__id__iendswith: 
        :param str user__enrollment_groups__id__iexact: 
        :param str user__enrollment_groups__id__in: 
        :param str user__enrollment_groups__id__iregex: 
        :param str user__enrollment_groups__id__isnull: 
        :param str user__enrollment_groups__id__istartswith: 
        :param str user__enrollment_groups__id__lt: 
        :param str user__enrollment_groups__id__lte: 
        :param str user__enrollment_groups__id__minute: 
        :param str user__enrollment_groups__id__month: 
        :param str user__enrollment_groups__id__range: 
        :param str user__enrollment_groups__id__regex: 
        :param str user__enrollment_groups__id__search: 
        :param str user__enrollment_groups__id__second: 
        :param str user__enrollment_groups__id__startswith: 
        :param str user__enrollment_groups__id__week_day: 
        :param str user__enrollment_groups__id__year: 
        :param str user__learner__learnergroups__area: 
        :param str user__learner__learnergroups__isnull: 
        :param str user__learner__learnergroups__area__manager: 
        :param str user__learner__learnergroups__area__isnull: 
        :param str user__learner__learnergroups__area__manager__isnull: 
        :param str ordering: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'start_time', 'module', 'user', 'start_time__contains', 'start_time__day', 'start_time__endswith', 'start_time__exact', 'start_time__gt', 'start_time__gte', 'start_time__hour', 'start_time__icontains', 'start_time__iendswith', 'start_time__iexact', 'start_time__in', 'start_time__iregex', 'start_time__isnull', 'start_time__istartswith', 'start_time__lt', 'start_time__lte', 'start_time__minute', 'start_time__month', 'start_time__range', 'start_time__regex', 'start_time__search', 'start_time__second', 'start_time__startswith', 'start_time__week_day', 'start_time__year', 'module__isnull', 'user__enrollment_groups', 'user__learner', 'user__isnull', 'user__enrollment_groups__id', 'user__enrollment_groups__isnull', 'user__learner__learnergroups', 'user__learner__isnull', 'user__enrollment_groups__id__contains', 'user__enrollment_groups__id__day', 'user__enrollment_groups__id__endswith', 'user__enrollment_groups__id__exact', 'user__enrollment_groups__id__gt', 'user__enrollment_groups__id__gte', 'user__enrollment_groups__id__hour', 'user__enrollment_groups__id__icontains', 'user__enrollment_groups__id__iendswith', 'user__enrollment_groups__id__iexact', 'user__enrollment_groups__id__in', 'user__enrollment_groups__id__iregex', 'user__enrollment_groups__id__isnull', 'user__enrollment_groups__id__istartswith', 'user__enrollment_groups__id__lt', 'user__enrollment_groups__id__lte', 'user__enrollment_groups__id__minute', 'user__enrollment_groups__id__month', 'user__enrollment_groups__id__range', 'user__enrollment_groups__id__regex', 'user__enrollment_groups__id__search', 'user__enrollment_groups__id__second', 'user__enrollment_groups__id__startswith', 'user__enrollment_groups__id__week_day', 'user__enrollment_groups__id__year', 'user__learner__learnergroups__area', 'user__learner__learnergroups__isnull', 'user__learner__learnergroups__area__manager', 'user__learner__learnergroups__area__isnull', 'user__learner__learnergroups__area__manager__isnull', 'ordering']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_module_attempts_dataframe_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/v1/module_attempts/dataframe/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'start_time' in params:
            query_params['start_time'] = params['start_time']
        if 'module' in params:
            query_params['module'] = params['module']
        if 'user' in params:
            query_params['user'] = params['user']
        if 'start_time__contains' in params:
            query_params['start_time__contains'] = params['start_time__contains']
        if 'start_time__day' in params:
            query_params['start_time__day'] = params['start_time__day']
        if 'start_time__endswith' in params:
            query_params['start_time__endswith'] = params['start_time__endswith']
        if 'start_time__exact' in params:
            query_params['start_time__exact'] = params['start_time__exact']
        if 'start_time__gt' in params:
            query_params['start_time__gt'] = params['start_time__gt']
        if 'start_time__gte' in params:
            query_params['start_time__gte'] = params['start_time__gte']
        if 'start_time__hour' in params:
            query_params['start_time__hour'] = params['start_time__hour']
        if 'start_time__icontains' in params:
            query_params['start_time__icontains'] = params['start_time__icontains']
        if 'start_time__iendswith' in params:
            query_params['start_time__iendswith'] = params['start_time__iendswith']
        if 'start_time__iexact' in params:
            query_params['start_time__iexact'] = params['start_time__iexact']
        if 'start_time__in' in params:
            query_params['start_time__in'] = params['start_time__in']
        if 'start_time__iregex' in params:
            query_params['start_time__iregex'] = params['start_time__iregex']
        if 'start_time__isnull' in params:
            query_params['start_time__isnull'] = params['start_time__isnull']
        if 'start_time__istartswith' in params:
            query_params['start_time__istartswith'] = params['start_time__istartswith']
        if 'start_time__lt' in params:
            query_params['start_time__lt'] = params['start_time__lt']
        if 'start_time__lte' in params:
            query_params['start_time__lte'] = params['start_time__lte']
        if 'start_time__minute' in params:
            query_params['start_time__minute'] = params['start_time__minute']
        if 'start_time__month' in params:
            query_params['start_time__month'] = params['start_time__month']
        if 'start_time__range' in params:
            query_params['start_time__range'] = params['start_time__range']
        if 'start_time__regex' in params:
            query_params['start_time__regex'] = params['start_time__regex']
        if 'start_time__search' in params:
            query_params['start_time__search'] = params['start_time__search']
        if 'start_time__second' in params:
            query_params['start_time__second'] = params['start_time__second']
        if 'start_time__startswith' in params:
            query_params['start_time__startswith'] = params['start_time__startswith']
        if 'start_time__week_day' in params:
            query_params['start_time__week_day'] = params['start_time__week_day']
        if 'start_time__year' in params:
            query_params['start_time__year'] = params['start_time__year']
        if 'module__isnull' in params:
            query_params['module__isnull'] = params['module__isnull']
        if 'user__enrollment_groups' in params:
            query_params['user__enrollment_groups'] = params['user__enrollment_groups']
        if 'user__learner' in params:
            query_params['user__learner'] = params['user__learner']
        if 'user__isnull' in params:
            query_params['user__isnull'] = params['user__isnull']
        if 'user__enrollment_groups__id' in params:
            query_params['user__enrollment_groups__id'] = params['user__enrollment_groups__id']
        if 'user__enrollment_groups__isnull' in params:
            query_params['user__enrollment_groups__isnull'] = params['user__enrollment_groups__isnull']
        if 'user__learner__learnergroups' in params:
            query_params['user__learner__learnergroups'] = params['user__learner__learnergroups']
        if 'user__learner__isnull' in params:
            query_params['user__learner__isnull'] = params['user__learner__isnull']
        if 'user__enrollment_groups__id__contains' in params:
            query_params['user__enrollment_groups__id__contains'] = params['user__enrollment_groups__id__contains']
        if 'user__enrollment_groups__id__day' in params:
            query_params['user__enrollment_groups__id__day'] = params['user__enrollment_groups__id__day']
        if 'user__enrollment_groups__id__endswith' in params:
            query_params['user__enrollment_groups__id__endswith'] = params['user__enrollment_groups__id__endswith']
        if 'user__enrollment_groups__id__exact' in params:
            query_params['user__enrollment_groups__id__exact'] = params['user__enrollment_groups__id__exact']
        if 'user__enrollment_groups__id__gt' in params:
            query_params['user__enrollment_groups__id__gt'] = params['user__enrollment_groups__id__gt']
        if 'user__enrollment_groups__id__gte' in params:
            query_params['user__enrollment_groups__id__gte'] = params['user__enrollment_groups__id__gte']
        if 'user__enrollment_groups__id__hour' in params:
            query_params['user__enrollment_groups__id__hour'] = params['user__enrollment_groups__id__hour']
        if 'user__enrollment_groups__id__icontains' in params:
            query_params['user__enrollment_groups__id__icontains'] = params['user__enrollment_groups__id__icontains']
        if 'user__enrollment_groups__id__iendswith' in params:
            query_params['user__enrollment_groups__id__iendswith'] = params['user__enrollment_groups__id__iendswith']
        if 'user__enrollment_groups__id__iexact' in params:
            query_params['user__enrollment_groups__id__iexact'] = params['user__enrollment_groups__id__iexact']
        if 'user__enrollment_groups__id__in' in params:
            query_params['user__enrollment_groups__id__in'] = params['user__enrollment_groups__id__in']
        if 'user__enrollment_groups__id__iregex' in params:
            query_params['user__enrollment_groups__id__iregex'] = params['user__enrollment_groups__id__iregex']
        if 'user__enrollment_groups__id__isnull' in params:
            query_params['user__enrollment_groups__id__isnull'] = params['user__enrollment_groups__id__isnull']
        if 'user__enrollment_groups__id__istartswith' in params:
            query_params['user__enrollment_groups__id__istartswith'] = params['user__enrollment_groups__id__istartswith']
        if 'user__enrollment_groups__id__lt' in params:
            query_params['user__enrollment_groups__id__lt'] = params['user__enrollment_groups__id__lt']
        if 'user__enrollment_groups__id__lte' in params:
            query_params['user__enrollment_groups__id__lte'] = params['user__enrollment_groups__id__lte']
        if 'user__enrollment_groups__id__minute' in params:
            query_params['user__enrollment_groups__id__minute'] = params['user__enrollment_groups__id__minute']
        if 'user__enrollment_groups__id__month' in params:
            query_params['user__enrollment_groups__id__month'] = params['user__enrollment_groups__id__month']
        if 'user__enrollment_groups__id__range' in params:
            query_params['user__enrollment_groups__id__range'] = params['user__enrollment_groups__id__range']
        if 'user__enrollment_groups__id__regex' in params:
            query_params['user__enrollment_groups__id__regex'] = params['user__enrollment_groups__id__regex']
        if 'user__enrollment_groups__id__search' in params:
            query_params['user__enrollment_groups__id__search'] = params['user__enrollment_groups__id__search']
        if 'user__enrollment_groups__id__second' in params:
            query_params['user__enrollment_groups__id__second'] = params['user__enrollment_groups__id__second']
        if 'user__enrollment_groups__id__startswith' in params:
            query_params['user__enrollment_groups__id__startswith'] = params['user__enrollment_groups__id__startswith']
        if 'user__enrollment_groups__id__week_day' in params:
            query_params['user__enrollment_groups__id__week_day'] = params['user__enrollment_groups__id__week_day']
        if 'user__enrollment_groups__id__year' in params:
            query_params['user__enrollment_groups__id__year'] = params['user__enrollment_groups__id__year']
        if 'user__learner__learnergroups__area' in params:
            query_params['user__learner__learnergroups__area'] = params['user__learner__learnergroups__area']
        if 'user__learner__learnergroups__isnull' in params:
            query_params['user__learner__learnergroups__isnull'] = params['user__learner__learnergroups__isnull']
        if 'user__learner__learnergroups__area__manager' in params:
            query_params['user__learner__learnergroups__area__manager'] = params['user__learner__learnergroups__area__manager']
        if 'user__learner__learnergroups__area__isnull' in params:
            query_params['user__learner__learnergroups__area__isnull'] = params['user__learner__learnergroups__area__isnull']
        if 'user__learner__learnergroups__area__manager__isnull' in params:
            query_params['user__learner__learnergroups__area__manager__isnull'] = params['user__learner__learnergroups__area__manager__isnull']
        if 'ordering' in params:
            query_params['ordering'] = params['ordering']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_module_attempts_dataframe_to_pivot_table_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_module_attempts_dataframe_to_pivot_table_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_module_attempts_dataframe_to_pivot_table_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/v1/module_attempts/dataframe/to_pivot_table/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_module_attempts_dataframe_to_timeseries_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_module_attempts_dataframe_to_timeseries_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_module_attempts_dataframe_to_timeseries_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/v1/module_attempts/dataframe/to_timeseries/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
