# coding: utf-8

"""
LearnergroupsApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class LearnergroupsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_learner_groups_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_learner_groups_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str limit: 
        :param str offset: 
        :param str name: 
        :param str area: 
        :param str name__contains: 
        :param str name__day: 
        :param str name__endswith: 
        :param str name__exact: 
        :param str name__gt: 
        :param str name__gte: 
        :param str name__hour: 
        :param str name__icontains: 
        :param str name__iendswith: 
        :param str name__iexact: 
        :param str name__in: 
        :param str name__iregex: 
        :param str name__isnull: 
        :param str name__istartswith: 
        :param str name__lt: 
        :param str name__lte: 
        :param str name__minute: 
        :param str name__month: 
        :param str name__range: 
        :param str name__regex: 
        :param str name__search: 
        :param str name__second: 
        :param str name__startswith: 
        :param str name__week_day: 
        :param str name__year: 
        :param str area__manager: 
        :param str area__isnull: 
        :param str area__manager__isnull: 
        :param str ordering: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'name', 'area', 'name__contains', 'name__day', 'name__endswith', 'name__exact', 'name__gt', 'name__gte', 'name__hour', 'name__icontains', 'name__iendswith', 'name__iexact', 'name__in', 'name__iregex', 'name__isnull', 'name__istartswith', 'name__lt', 'name__lte', 'name__minute', 'name__month', 'name__range', 'name__regex', 'name__search', 'name__second', 'name__startswith', 'name__week_day', 'name__year', 'area__manager', 'area__isnull', 'area__manager__isnull', 'ordering']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_learner_groups_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/v1/learner_groups/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'area' in params:
            query_params['area'] = params['area']
        if 'name__contains' in params:
            query_params['name__contains'] = params['name__contains']
        if 'name__day' in params:
            query_params['name__day'] = params['name__day']
        if 'name__endswith' in params:
            query_params['name__endswith'] = params['name__endswith']
        if 'name__exact' in params:
            query_params['name__exact'] = params['name__exact']
        if 'name__gt' in params:
            query_params['name__gt'] = params['name__gt']
        if 'name__gte' in params:
            query_params['name__gte'] = params['name__gte']
        if 'name__hour' in params:
            query_params['name__hour'] = params['name__hour']
        if 'name__icontains' in params:
            query_params['name__icontains'] = params['name__icontains']
        if 'name__iendswith' in params:
            query_params['name__iendswith'] = params['name__iendswith']
        if 'name__iexact' in params:
            query_params['name__iexact'] = params['name__iexact']
        if 'name__in' in params:
            query_params['name__in'] = params['name__in']
        if 'name__iregex' in params:
            query_params['name__iregex'] = params['name__iregex']
        if 'name__isnull' in params:
            query_params['name__isnull'] = params['name__isnull']
        if 'name__istartswith' in params:
            query_params['name__istartswith'] = params['name__istartswith']
        if 'name__lt' in params:
            query_params['name__lt'] = params['name__lt']
        if 'name__lte' in params:
            query_params['name__lte'] = params['name__lte']
        if 'name__minute' in params:
            query_params['name__minute'] = params['name__minute']
        if 'name__month' in params:
            query_params['name__month'] = params['name__month']
        if 'name__range' in params:
            query_params['name__range'] = params['name__range']
        if 'name__regex' in params:
            query_params['name__regex'] = params['name__regex']
        if 'name__search' in params:
            query_params['name__search'] = params['name__search']
        if 'name__second' in params:
            query_params['name__second'] = params['name__second']
        if 'name__startswith' in params:
            query_params['name__startswith'] = params['name__startswith']
        if 'name__week_day' in params:
            query_params['name__week_day'] = params['name__week_day']
        if 'name__year' in params:
            query_params['name__year'] = params['name__year']
        if 'area__manager' in params:
            query_params['area__manager'] = params['area__manager']
        if 'area__isnull' in params:
            query_params['area__isnull'] = params['area__isnull']
        if 'area__manager__isnull' in params:
            query_params['area__manager__isnull'] = params['area__manager__isnull']
        if 'ordering' in params:
            query_params['ordering'] = params['ordering']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_learner_groups_post(self, name, company, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_learner_groups_post(name, company, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :param str company:  (required)
        :param str logo: 
        :param str members: 
        :param str auto_enrol_plans: 
        :param str description: 
        :param str area: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'company', 'logo', 'members', 'auto_enrol_plans', 'description', 'area']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_learner_groups_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v1_learner_groups_post`")
        # verify the required parameter 'company' is set
        if ('company' not in params) or (params['company'] is None):
            raise ValueError("Missing the required parameter `company` when calling `api_v1_learner_groups_post`")

        resource_path = '/api/v1/learner_groups/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'logo' in params:
            form_params['logo'] = params['logo']
        if 'members' in params:
            form_params['members'] = params['members']
        if 'auto_enrol_plans' in params:
            form_params['auto_enrol_plans'] = params['auto_enrol_plans']
        if 'name' in params:
            form_params['name'] = params['name']
        if 'description' in params:
            form_params['description'] = params['description']
        if 'company' in params:
            form_params['company'] = params['company']
        if 'area' in params:
            form_params['area'] = params['area']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_learner_groups_pk_get(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_learner_groups_pk_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_learner_groups_pk_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_learner_groups_pk_get`")

        resource_path = '/api/v1/learner_groups/{pk}/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_learner_groups_pk_put(self, pk, name, company, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_learner_groups_pk_put(pk, name, company, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str name:  (required)
        :param str company:  (required)
        :param str logo: 
        :param str members: 
        :param str auto_enrol_plans: 
        :param str description: 
        :param str area: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'name', 'company', 'logo', 'members', 'auto_enrol_plans', 'description', 'area']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_learner_groups_pk_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_learner_groups_pk_put`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v1_learner_groups_pk_put`")
        # verify the required parameter 'company' is set
        if ('company' not in params) or (params['company'] is None):
            raise ValueError("Missing the required parameter `company` when calling `api_v1_learner_groups_pk_put`")

        resource_path = '/api/v1/learner_groups/{pk}/'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'logo' in params:
            form_params['logo'] = params['logo']
        if 'members' in params:
            form_params['members'] = params['members']
        if 'auto_enrol_plans' in params:
            form_params['auto_enrol_plans'] = params['auto_enrol_plans']
        if 'name' in params:
            form_params['name'] = params['name']
        if 'description' in params:
            form_params['description'] = params['description']
        if 'company' in params:
            form_params['company'] = params['company']
        if 'area' in params:
            form_params['area'] = params['area']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_learner_groups_pk_delete(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_learner_groups_pk_delete(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_learner_groups_pk_delete" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_learner_groups_pk_delete`")

        resource_path = '/api/v1/learner_groups/{pk}/'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_learner_groups_pk_patch(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_learner_groups_pk_patch(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str logo: 
        :param str members: 
        :param str auto_enrol_plans: 
        :param str name: 
        :param str description: 
        :param str company: 
        :param str area: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'logo', 'members', 'auto_enrol_plans', 'name', 'description', 'company', 'area']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_learner_groups_pk_patch" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_learner_groups_pk_patch`")

        resource_path = '/api/v1/learner_groups/{pk}/'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'logo' in params:
            form_params['logo'] = params['logo']
        if 'members' in params:
            form_params['members'] = params['members']
        if 'auto_enrol_plans' in params:
            form_params['auto_enrol_plans'] = params['auto_enrol_plans']
        if 'name' in params:
            form_params['name'] = params['name']
        if 'description' in params:
            form_params['description'] = params['description']
        if 'company' in params:
            form_params['company'] = params['company']
        if 'area' in params:
            form_params['area'] = params['area']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
