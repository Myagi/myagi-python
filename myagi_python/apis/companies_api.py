# coding: utf-8

"""
CompaniesApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CompaniesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_companies_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_companies_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str limit: 
        :param str offset: 
        :param str company_name: 
        :param str shared_training_units: 
        :param str company_name__contains: 
        :param str company_name__day: 
        :param str company_name__endswith: 
        :param str company_name__exact: 
        :param str company_name__gt: 
        :param str company_name__gte: 
        :param str company_name__hour: 
        :param str company_name__icontains: 
        :param str company_name__iendswith: 
        :param str company_name__iexact: 
        :param str company_name__in: 
        :param str company_name__iregex: 
        :param str company_name__isnull: 
        :param str company_name__istartswith: 
        :param str company_name__lt: 
        :param str company_name__lte: 
        :param str company_name__minute: 
        :param str company_name__month: 
        :param str company_name__range: 
        :param str company_name__regex: 
        :param str company_name__search: 
        :param str company_name__second: 
        :param str company_name__startswith: 
        :param str company_name__week_day: 
        :param str company_name__year: 
        :param str shared_training_units__isnull: 
        :param str ordering: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'company_name', 'shared_training_units', 'company_name__contains', 'company_name__day', 'company_name__endswith', 'company_name__exact', 'company_name__gt', 'company_name__gte', 'company_name__hour', 'company_name__icontains', 'company_name__iendswith', 'company_name__iexact', 'company_name__in', 'company_name__iregex', 'company_name__isnull', 'company_name__istartswith', 'company_name__lt', 'company_name__lte', 'company_name__minute', 'company_name__month', 'company_name__range', 'company_name__regex', 'company_name__search', 'company_name__second', 'company_name__startswith', 'company_name__week_day', 'company_name__year', 'shared_training_units__isnull', 'ordering']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/v1/companies/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'company_name' in params:
            query_params['company_name'] = params['company_name']
        if 'shared_training_units' in params:
            query_params['shared_training_units'] = params['shared_training_units']
        if 'company_name__contains' in params:
            query_params['company_name__contains'] = params['company_name__contains']
        if 'company_name__day' in params:
            query_params['company_name__day'] = params['company_name__day']
        if 'company_name__endswith' in params:
            query_params['company_name__endswith'] = params['company_name__endswith']
        if 'company_name__exact' in params:
            query_params['company_name__exact'] = params['company_name__exact']
        if 'company_name__gt' in params:
            query_params['company_name__gt'] = params['company_name__gt']
        if 'company_name__gte' in params:
            query_params['company_name__gte'] = params['company_name__gte']
        if 'company_name__hour' in params:
            query_params['company_name__hour'] = params['company_name__hour']
        if 'company_name__icontains' in params:
            query_params['company_name__icontains'] = params['company_name__icontains']
        if 'company_name__iendswith' in params:
            query_params['company_name__iendswith'] = params['company_name__iendswith']
        if 'company_name__iexact' in params:
            query_params['company_name__iexact'] = params['company_name__iexact']
        if 'company_name__in' in params:
            query_params['company_name__in'] = params['company_name__in']
        if 'company_name__iregex' in params:
            query_params['company_name__iregex'] = params['company_name__iregex']
        if 'company_name__isnull' in params:
            query_params['company_name__isnull'] = params['company_name__isnull']
        if 'company_name__istartswith' in params:
            query_params['company_name__istartswith'] = params['company_name__istartswith']
        if 'company_name__lt' in params:
            query_params['company_name__lt'] = params['company_name__lt']
        if 'company_name__lte' in params:
            query_params['company_name__lte'] = params['company_name__lte']
        if 'company_name__minute' in params:
            query_params['company_name__minute'] = params['company_name__minute']
        if 'company_name__month' in params:
            query_params['company_name__month'] = params['company_name__month']
        if 'company_name__range' in params:
            query_params['company_name__range'] = params['company_name__range']
        if 'company_name__regex' in params:
            query_params['company_name__regex'] = params['company_name__regex']
        if 'company_name__search' in params:
            query_params['company_name__search'] = params['company_name__search']
        if 'company_name__second' in params:
            query_params['company_name__second'] = params['company_name__second']
        if 'company_name__startswith' in params:
            query_params['company_name__startswith'] = params['company_name__startswith']
        if 'company_name__week_day' in params:
            query_params['company_name__week_day'] = params['company_name__week_day']
        if 'company_name__year' in params:
            query_params['company_name__year'] = params['company_name__year']
        if 'shared_training_units__isnull' in params:
            query_params['shared_training_units__isnull'] = params['shared_training_units__isnull']
        if 'ordering' in params:
            query_params['ordering'] = params['ordering']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_companies_post(self, company_name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_companies_post(company_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_name:  (required)
        :param str company_logo: 
        :param str cover_image: 
        :param str subscriptions: 
        :param str company_description: 
        :param str auto_enrol_user_switch: 
        :param str auto_enrol_last_run: 
        :param str company_url: 
        :param str cover_image_scales: 
        :param str unclaimed: 
        :param str subdomain: 
        :param str company_type: 
        :param str extra_company_data: 
        :param str tags: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_name', 'company_logo', 'cover_image', 'subscriptions', 'company_description', 'auto_enrol_user_switch', 'auto_enrol_last_run', 'company_url', 'cover_image_scales', 'unclaimed', 'subdomain', 'company_type', 'extra_company_data', 'tags']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'company_name' is set
        if ('company_name' not in params) or (params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `api_v1_companies_post`")

        resource_path = '/api/v1/companies/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'company_logo' in params:
            form_params['company_logo'] = params['company_logo']
        if 'cover_image' in params:
            form_params['cover_image'] = params['cover_image']
        if 'subscriptions' in params:
            form_params['subscriptions'] = params['subscriptions']
        if 'company_name' in params:
            form_params['company_name'] = params['company_name']
        if 'company_description' in params:
            form_params['company_description'] = params['company_description']
        if 'auto_enrol_user_switch' in params:
            form_params['auto_enrol_user_switch'] = params['auto_enrol_user_switch']
        if 'auto_enrol_last_run' in params:
            form_params['auto_enrol_last_run'] = params['auto_enrol_last_run']
        if 'company_url' in params:
            form_params['company_url'] = params['company_url']
        if 'cover_image_scales' in params:
            form_params['cover_image_scales'] = params['cover_image_scales']
        if 'unclaimed' in params:
            form_params['unclaimed'] = params['unclaimed']
        if 'subdomain' in params:
            form_params['subdomain'] = params['subdomain']
        if 'company_type' in params:
            form_params['company_type'] = params['company_type']
        if 'extra_company_data' in params:
            form_params['extra_company_data'] = params['extra_company_data']
        if 'tags' in params:
            form_params['tags'] = params['tags']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_companies_create_and_add_to_company_post(self, company_name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_companies_create_and_add_to_company_post(company_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_name:  (required)
        :param str company_logo: 
        :param str cover_image: 
        :param str subscriptions: 
        :param str company_description: 
        :param str auto_enrol_user_switch: 
        :param str auto_enrol_last_run: 
        :param str company_url: 
        :param str cover_image_scales: 
        :param str unclaimed: 
        :param str subdomain: 
        :param str company_type: 
        :param str extra_company_data: 
        :param str tags: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_name', 'company_logo', 'cover_image', 'subscriptions', 'company_description', 'auto_enrol_user_switch', 'auto_enrol_last_run', 'company_url', 'cover_image_scales', 'unclaimed', 'subdomain', 'company_type', 'extra_company_data', 'tags']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_create_and_add_to_company_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'company_name' is set
        if ('company_name' not in params) or (params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `api_v1_companies_create_and_add_to_company_post`")

        resource_path = '/api/v1/companies/create_and_add_to_company/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'company_logo' in params:
            form_params['company_logo'] = params['company_logo']
        if 'cover_image' in params:
            form_params['cover_image'] = params['cover_image']
        if 'subscriptions' in params:
            form_params['subscriptions'] = params['subscriptions']
        if 'company_name' in params:
            form_params['company_name'] = params['company_name']
        if 'company_description' in params:
            form_params['company_description'] = params['company_description']
        if 'auto_enrol_user_switch' in params:
            form_params['auto_enrol_user_switch'] = params['auto_enrol_user_switch']
        if 'auto_enrol_last_run' in params:
            form_params['auto_enrol_last_run'] = params['auto_enrol_last_run']
        if 'company_url' in params:
            form_params['company_url'] = params['company_url']
        if 'cover_image_scales' in params:
            form_params['cover_image_scales'] = params['cover_image_scales']
        if 'unclaimed' in params:
            form_params['unclaimed'] = params['unclaimed']
        if 'subdomain' in params:
            form_params['subdomain'] = params['subdomain']
        if 'company_type' in params:
            form_params['company_type'] = params['company_type']
        if 'extra_company_data' in params:
            form_params['extra_company_data'] = params['extra_company_data']
        if 'tags' in params:
            form_params['tags'] = params['tags']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_companies_logo_query_post(self, company_name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_companies_logo_query_post(company_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_name:  (required)
        :param str company_logo: 
        :param str cover_image: 
        :param str subscriptions: 
        :param str company_description: 
        :param str auto_enrol_user_switch: 
        :param str auto_enrol_last_run: 
        :param str company_url: 
        :param str cover_image_scales: 
        :param str unclaimed: 
        :param str subdomain: 
        :param str company_type: 
        :param str extra_company_data: 
        :param str tags: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_name', 'company_logo', 'cover_image', 'subscriptions', 'company_description', 'auto_enrol_user_switch', 'auto_enrol_last_run', 'company_url', 'cover_image_scales', 'unclaimed', 'subdomain', 'company_type', 'extra_company_data', 'tags']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_logo_query_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'company_name' is set
        if ('company_name' not in params) or (params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `api_v1_companies_logo_query_post`")

        resource_path = '/api/v1/companies/logo_query/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'company_logo' in params:
            form_params['company_logo'] = params['company_logo']
        if 'cover_image' in params:
            form_params['cover_image'] = params['cover_image']
        if 'subscriptions' in params:
            form_params['subscriptions'] = params['subscriptions']
        if 'company_name' in params:
            form_params['company_name'] = params['company_name']
        if 'company_description' in params:
            form_params['company_description'] = params['company_description']
        if 'auto_enrol_user_switch' in params:
            form_params['auto_enrol_user_switch'] = params['auto_enrol_user_switch']
        if 'auto_enrol_last_run' in params:
            form_params['auto_enrol_last_run'] = params['auto_enrol_last_run']
        if 'company_url' in params:
            form_params['company_url'] = params['company_url']
        if 'cover_image_scales' in params:
            form_params['cover_image_scales'] = params['cover_image_scales']
        if 'unclaimed' in params:
            form_params['unclaimed'] = params['unclaimed']
        if 'subdomain' in params:
            form_params['subdomain'] = params['subdomain']
        if 'company_type' in params:
            form_params['company_type'] = params['company_type']
        if 'extra_company_data' in params:
            form_params['extra_company_data'] = params['extra_company_data']
        if 'tags' in params:
            form_params['tags'] = params['tags']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_companies_pk_get(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_companies_pk_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_pk_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_companies_pk_get`")

        resource_path = '/api/v1/companies/{pk}/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_companies_pk_put(self, pk, company_name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_companies_pk_put(pk, company_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str company_name:  (required)
        :param str company_logo: 
        :param str cover_image: 
        :param str subscriptions: 
        :param str company_description: 
        :param str auto_enrol_user_switch: 
        :param str auto_enrol_last_run: 
        :param str company_url: 
        :param str cover_image_scales: 
        :param str unclaimed: 
        :param str subdomain: 
        :param str company_type: 
        :param str extra_company_data: 
        :param str tags: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'company_name', 'company_logo', 'cover_image', 'subscriptions', 'company_description', 'auto_enrol_user_switch', 'auto_enrol_last_run', 'company_url', 'cover_image_scales', 'unclaimed', 'subdomain', 'company_type', 'extra_company_data', 'tags']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_pk_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_companies_pk_put`")
        # verify the required parameter 'company_name' is set
        if ('company_name' not in params) or (params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `api_v1_companies_pk_put`")

        resource_path = '/api/v1/companies/{pk}/'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'company_logo' in params:
            form_params['company_logo'] = params['company_logo']
        if 'cover_image' in params:
            form_params['cover_image'] = params['cover_image']
        if 'subscriptions' in params:
            form_params['subscriptions'] = params['subscriptions']
        if 'company_name' in params:
            form_params['company_name'] = params['company_name']
        if 'company_description' in params:
            form_params['company_description'] = params['company_description']
        if 'auto_enrol_user_switch' in params:
            form_params['auto_enrol_user_switch'] = params['auto_enrol_user_switch']
        if 'auto_enrol_last_run' in params:
            form_params['auto_enrol_last_run'] = params['auto_enrol_last_run']
        if 'company_url' in params:
            form_params['company_url'] = params['company_url']
        if 'cover_image_scales' in params:
            form_params['cover_image_scales'] = params['cover_image_scales']
        if 'unclaimed' in params:
            form_params['unclaimed'] = params['unclaimed']
        if 'subdomain' in params:
            form_params['subdomain'] = params['subdomain']
        if 'company_type' in params:
            form_params['company_type'] = params['company_type']
        if 'extra_company_data' in params:
            form_params['extra_company_data'] = params['extra_company_data']
        if 'tags' in params:
            form_params['tags'] = params['tags']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_companies_pk_delete(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_companies_pk_delete(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_pk_delete" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_companies_pk_delete`")

        resource_path = '/api/v1/companies/{pk}/'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_companies_pk_patch(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_companies_pk_patch(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str company_logo: 
        :param str cover_image: 
        :param str subscriptions: 
        :param str company_name: 
        :param str company_description: 
        :param str auto_enrol_user_switch: 
        :param str auto_enrol_last_run: 
        :param str company_url: 
        :param str cover_image_scales: 
        :param str unclaimed: 
        :param str subdomain: 
        :param str company_type: 
        :param str extra_company_data: 
        :param str tags: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'company_logo', 'cover_image', 'subscriptions', 'company_name', 'company_description', 'auto_enrol_user_switch', 'auto_enrol_last_run', 'company_url', 'cover_image_scales', 'unclaimed', 'subdomain', 'company_type', 'extra_company_data', 'tags']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_pk_patch" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_companies_pk_patch`")

        resource_path = '/api/v1/companies/{pk}/'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'company_logo' in params:
            form_params['company_logo'] = params['company_logo']
        if 'cover_image' in params:
            form_params['cover_image'] = params['cover_image']
        if 'subscriptions' in params:
            form_params['subscriptions'] = params['subscriptions']
        if 'company_name' in params:
            form_params['company_name'] = params['company_name']
        if 'company_description' in params:
            form_params['company_description'] = params['company_description']
        if 'auto_enrol_user_switch' in params:
            form_params['auto_enrol_user_switch'] = params['auto_enrol_user_switch']
        if 'auto_enrol_last_run' in params:
            form_params['auto_enrol_last_run'] = params['auto_enrol_last_run']
        if 'company_url' in params:
            form_params['company_url'] = params['company_url']
        if 'cover_image_scales' in params:
            form_params['cover_image_scales'] = params['cover_image_scales']
        if 'unclaimed' in params:
            form_params['unclaimed'] = params['unclaimed']
        if 'subdomain' in params:
            form_params['subdomain'] = params['subdomain']
        if 'company_type' in params:
            form_params['company_type'] = params['company_type']
        if 'extra_company_data' in params:
            form_params['extra_company_data'] = params['extra_company_data']
        if 'tags' in params:
            form_params['tags'] = params['tags']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_companies_pk_set_timezone_post(self, pk, company_name, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_companies_pk_set_timezone_post(pk, company_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str company_name:  (required)
        :param str company_logo: 
        :param str cover_image: 
        :param str subscriptions: 
        :param str company_description: 
        :param str auto_enrol_user_switch: 
        :param str auto_enrol_last_run: 
        :param str company_url: 
        :param str cover_image_scales: 
        :param str unclaimed: 
        :param str subdomain: 
        :param str company_type: 
        :param str extra_company_data: 
        :param str tags: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'company_name', 'company_logo', 'cover_image', 'subscriptions', 'company_description', 'auto_enrol_user_switch', 'auto_enrol_last_run', 'company_url', 'cover_image_scales', 'unclaimed', 'subdomain', 'company_type', 'extra_company_data', 'tags']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_pk_set_timezone_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_companies_pk_set_timezone_post`")
        # verify the required parameter 'company_name' is set
        if ('company_name' not in params) or (params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `api_v1_companies_pk_set_timezone_post`")

        resource_path = '/api/v1/companies/{pk}/set_timezone/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'company_logo' in params:
            form_params['company_logo'] = params['company_logo']
        if 'cover_image' in params:
            form_params['cover_image'] = params['cover_image']
        if 'subscriptions' in params:
            form_params['subscriptions'] = params['subscriptions']
        if 'company_name' in params:
            form_params['company_name'] = params['company_name']
        if 'company_description' in params:
            form_params['company_description'] = params['company_description']
        if 'auto_enrol_user_switch' in params:
            form_params['auto_enrol_user_switch'] = params['auto_enrol_user_switch']
        if 'auto_enrol_last_run' in params:
            form_params['auto_enrol_last_run'] = params['auto_enrol_last_run']
        if 'company_url' in params:
            form_params['company_url'] = params['company_url']
        if 'cover_image_scales' in params:
            form_params['cover_image_scales'] = params['cover_image_scales']
        if 'unclaimed' in params:
            form_params['unclaimed'] = params['unclaimed']
        if 'subdomain' in params:
            form_params['subdomain'] = params['subdomain']
        if 'company_type' in params:
            form_params['company_type'] = params['company_type']
        if 'extra_company_data' in params:
            form_params['extra_company_data'] = params['extra_company_data']
        if 'tags' in params:
            form_params['tags'] = params['tags']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
