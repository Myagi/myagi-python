# coding: utf-8

"""
TrainingplansApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TrainingplansApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_training_plans_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_training_plans_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str limit: 
        :param str offset: 
        :param str training_unit: 
        :param str owner: 
        :param str deactivated: 
        :param str name: 
        :param str is_published: 
        :param str enrollment_groups: 
        :param str training_unit__public: 
        :param str training_unit__isnull: 
        :param str owner__isnull: 
        :param str deactivated__contains: 
        :param str deactivated__day: 
        :param str deactivated__endswith: 
        :param str deactivated__exact: 
        :param str deactivated__gt: 
        :param str deactivated__gte: 
        :param str deactivated__hour: 
        :param str deactivated__icontains: 
        :param str deactivated__iendswith: 
        :param str deactivated__iexact: 
        :param str deactivated__in: 
        :param str deactivated__iregex: 
        :param str deactivated__isnull: 
        :param str deactivated__istartswith: 
        :param str deactivated__lt: 
        :param str deactivated__lte: 
        :param str deactivated__minute: 
        :param str deactivated__month: 
        :param str deactivated__range: 
        :param str deactivated__regex: 
        :param str deactivated__search: 
        :param str deactivated__second: 
        :param str deactivated__startswith: 
        :param str deactivated__week_day: 
        :param str deactivated__year: 
        :param str name__contains: 
        :param str name__day: 
        :param str name__endswith: 
        :param str name__exact: 
        :param str name__gt: 
        :param str name__gte: 
        :param str name__hour: 
        :param str name__icontains: 
        :param str name__iendswith: 
        :param str name__iexact: 
        :param str name__in: 
        :param str name__iregex: 
        :param str name__isnull: 
        :param str name__istartswith: 
        :param str name__lt: 
        :param str name__lte: 
        :param str name__minute: 
        :param str name__month: 
        :param str name__range: 
        :param str name__regex: 
        :param str name__search: 
        :param str name__second: 
        :param str name__startswith: 
        :param str name__week_day: 
        :param str name__year: 
        :param str is_published__contains: 
        :param str is_published__day: 
        :param str is_published__endswith: 
        :param str is_published__exact: 
        :param str is_published__gt: 
        :param str is_published__gte: 
        :param str is_published__hour: 
        :param str is_published__icontains: 
        :param str is_published__iendswith: 
        :param str is_published__iexact: 
        :param str is_published__in: 
        :param str is_published__iregex: 
        :param str is_published__isnull: 
        :param str is_published__istartswith: 
        :param str is_published__lt: 
        :param str is_published__lte: 
        :param str is_published__minute: 
        :param str is_published__month: 
        :param str is_published__range: 
        :param str is_published__regex: 
        :param str is_published__search: 
        :param str is_published__second: 
        :param str is_published__startswith: 
        :param str is_published__week_day: 
        :param str is_published__year: 
        :param str enrollment_groups__isnull: 
        :param str training_unit__public__contains: 
        :param str training_unit__public__day: 
        :param str training_unit__public__endswith: 
        :param str training_unit__public__exact: 
        :param str training_unit__public__gt: 
        :param str training_unit__public__gte: 
        :param str training_unit__public__hour: 
        :param str training_unit__public__icontains: 
        :param str training_unit__public__iendswith: 
        :param str training_unit__public__iexact: 
        :param str training_unit__public__in: 
        :param str training_unit__public__iregex: 
        :param str training_unit__public__isnull: 
        :param str training_unit__public__istartswith: 
        :param str training_unit__public__lt: 
        :param str training_unit__public__lte: 
        :param str training_unit__public__minute: 
        :param str training_unit__public__month: 
        :param str training_unit__public__range: 
        :param str training_unit__public__regex: 
        :param str training_unit__public__search: 
        :param str training_unit__public__second: 
        :param str training_unit__public__startswith: 
        :param str training_unit__public__week_day: 
        :param str training_unit__public__year: 
        :param str ordering: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'training_unit', 'owner', 'deactivated', 'name', 'is_published', 'enrollment_groups', 'training_unit__public', 'training_unit__isnull', 'owner__isnull', 'deactivated__contains', 'deactivated__day', 'deactivated__endswith', 'deactivated__exact', 'deactivated__gt', 'deactivated__gte', 'deactivated__hour', 'deactivated__icontains', 'deactivated__iendswith', 'deactivated__iexact', 'deactivated__in', 'deactivated__iregex', 'deactivated__isnull', 'deactivated__istartswith', 'deactivated__lt', 'deactivated__lte', 'deactivated__minute', 'deactivated__month', 'deactivated__range', 'deactivated__regex', 'deactivated__search', 'deactivated__second', 'deactivated__startswith', 'deactivated__week_day', 'deactivated__year', 'name__contains', 'name__day', 'name__endswith', 'name__exact', 'name__gt', 'name__gte', 'name__hour', 'name__icontains', 'name__iendswith', 'name__iexact', 'name__in', 'name__iregex', 'name__isnull', 'name__istartswith', 'name__lt', 'name__lte', 'name__minute', 'name__month', 'name__range', 'name__regex', 'name__search', 'name__second', 'name__startswith', 'name__week_day', 'name__year', 'is_published__contains', 'is_published__day', 'is_published__endswith', 'is_published__exact', 'is_published__gt', 'is_published__gte', 'is_published__hour', 'is_published__icontains', 'is_published__iendswith', 'is_published__iexact', 'is_published__in', 'is_published__iregex', 'is_published__isnull', 'is_published__istartswith', 'is_published__lt', 'is_published__lte', 'is_published__minute', 'is_published__month', 'is_published__range', 'is_published__regex', 'is_published__search', 'is_published__second', 'is_published__startswith', 'is_published__week_day', 'is_published__year', 'enrollment_groups__isnull', 'training_unit__public__contains', 'training_unit__public__day', 'training_unit__public__endswith', 'training_unit__public__exact', 'training_unit__public__gt', 'training_unit__public__gte', 'training_unit__public__hour', 'training_unit__public__icontains', 'training_unit__public__iendswith', 'training_unit__public__iexact', 'training_unit__public__in', 'training_unit__public__iregex', 'training_unit__public__isnull', 'training_unit__public__istartswith', 'training_unit__public__lt', 'training_unit__public__lte', 'training_unit__public__minute', 'training_unit__public__month', 'training_unit__public__range', 'training_unit__public__regex', 'training_unit__public__search', 'training_unit__public__second', 'training_unit__public__startswith', 'training_unit__public__week_day', 'training_unit__public__year', 'ordering']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_training_plans_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/v1/training_plans/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'training_unit' in params:
            query_params['training_unit'] = params['training_unit']
        if 'owner' in params:
            query_params['owner'] = params['owner']
        if 'deactivated' in params:
            query_params['deactivated'] = params['deactivated']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'is_published' in params:
            query_params['is_published'] = params['is_published']
        if 'enrollment_groups' in params:
            query_params['enrollment_groups'] = params['enrollment_groups']
        if 'training_unit__public' in params:
            query_params['training_unit__public'] = params['training_unit__public']
        if 'training_unit__isnull' in params:
            query_params['training_unit__isnull'] = params['training_unit__isnull']
        if 'owner__isnull' in params:
            query_params['owner__isnull'] = params['owner__isnull']
        if 'deactivated__contains' in params:
            query_params['deactivated__contains'] = params['deactivated__contains']
        if 'deactivated__day' in params:
            query_params['deactivated__day'] = params['deactivated__day']
        if 'deactivated__endswith' in params:
            query_params['deactivated__endswith'] = params['deactivated__endswith']
        if 'deactivated__exact' in params:
            query_params['deactivated__exact'] = params['deactivated__exact']
        if 'deactivated__gt' in params:
            query_params['deactivated__gt'] = params['deactivated__gt']
        if 'deactivated__gte' in params:
            query_params['deactivated__gte'] = params['deactivated__gte']
        if 'deactivated__hour' in params:
            query_params['deactivated__hour'] = params['deactivated__hour']
        if 'deactivated__icontains' in params:
            query_params['deactivated__icontains'] = params['deactivated__icontains']
        if 'deactivated__iendswith' in params:
            query_params['deactivated__iendswith'] = params['deactivated__iendswith']
        if 'deactivated__iexact' in params:
            query_params['deactivated__iexact'] = params['deactivated__iexact']
        if 'deactivated__in' in params:
            query_params['deactivated__in'] = params['deactivated__in']
        if 'deactivated__iregex' in params:
            query_params['deactivated__iregex'] = params['deactivated__iregex']
        if 'deactivated__isnull' in params:
            query_params['deactivated__isnull'] = params['deactivated__isnull']
        if 'deactivated__istartswith' in params:
            query_params['deactivated__istartswith'] = params['deactivated__istartswith']
        if 'deactivated__lt' in params:
            query_params['deactivated__lt'] = params['deactivated__lt']
        if 'deactivated__lte' in params:
            query_params['deactivated__lte'] = params['deactivated__lte']
        if 'deactivated__minute' in params:
            query_params['deactivated__minute'] = params['deactivated__minute']
        if 'deactivated__month' in params:
            query_params['deactivated__month'] = params['deactivated__month']
        if 'deactivated__range' in params:
            query_params['deactivated__range'] = params['deactivated__range']
        if 'deactivated__regex' in params:
            query_params['deactivated__regex'] = params['deactivated__regex']
        if 'deactivated__search' in params:
            query_params['deactivated__search'] = params['deactivated__search']
        if 'deactivated__second' in params:
            query_params['deactivated__second'] = params['deactivated__second']
        if 'deactivated__startswith' in params:
            query_params['deactivated__startswith'] = params['deactivated__startswith']
        if 'deactivated__week_day' in params:
            query_params['deactivated__week_day'] = params['deactivated__week_day']
        if 'deactivated__year' in params:
            query_params['deactivated__year'] = params['deactivated__year']
        if 'name__contains' in params:
            query_params['name__contains'] = params['name__contains']
        if 'name__day' in params:
            query_params['name__day'] = params['name__day']
        if 'name__endswith' in params:
            query_params['name__endswith'] = params['name__endswith']
        if 'name__exact' in params:
            query_params['name__exact'] = params['name__exact']
        if 'name__gt' in params:
            query_params['name__gt'] = params['name__gt']
        if 'name__gte' in params:
            query_params['name__gte'] = params['name__gte']
        if 'name__hour' in params:
            query_params['name__hour'] = params['name__hour']
        if 'name__icontains' in params:
            query_params['name__icontains'] = params['name__icontains']
        if 'name__iendswith' in params:
            query_params['name__iendswith'] = params['name__iendswith']
        if 'name__iexact' in params:
            query_params['name__iexact'] = params['name__iexact']
        if 'name__in' in params:
            query_params['name__in'] = params['name__in']
        if 'name__iregex' in params:
            query_params['name__iregex'] = params['name__iregex']
        if 'name__isnull' in params:
            query_params['name__isnull'] = params['name__isnull']
        if 'name__istartswith' in params:
            query_params['name__istartswith'] = params['name__istartswith']
        if 'name__lt' in params:
            query_params['name__lt'] = params['name__lt']
        if 'name__lte' in params:
            query_params['name__lte'] = params['name__lte']
        if 'name__minute' in params:
            query_params['name__minute'] = params['name__minute']
        if 'name__month' in params:
            query_params['name__month'] = params['name__month']
        if 'name__range' in params:
            query_params['name__range'] = params['name__range']
        if 'name__regex' in params:
            query_params['name__regex'] = params['name__regex']
        if 'name__search' in params:
            query_params['name__search'] = params['name__search']
        if 'name__second' in params:
            query_params['name__second'] = params['name__second']
        if 'name__startswith' in params:
            query_params['name__startswith'] = params['name__startswith']
        if 'name__week_day' in params:
            query_params['name__week_day'] = params['name__week_day']
        if 'name__year' in params:
            query_params['name__year'] = params['name__year']
        if 'is_published__contains' in params:
            query_params['is_published__contains'] = params['is_published__contains']
        if 'is_published__day' in params:
            query_params['is_published__day'] = params['is_published__day']
        if 'is_published__endswith' in params:
            query_params['is_published__endswith'] = params['is_published__endswith']
        if 'is_published__exact' in params:
            query_params['is_published__exact'] = params['is_published__exact']
        if 'is_published__gt' in params:
            query_params['is_published__gt'] = params['is_published__gt']
        if 'is_published__gte' in params:
            query_params['is_published__gte'] = params['is_published__gte']
        if 'is_published__hour' in params:
            query_params['is_published__hour'] = params['is_published__hour']
        if 'is_published__icontains' in params:
            query_params['is_published__icontains'] = params['is_published__icontains']
        if 'is_published__iendswith' in params:
            query_params['is_published__iendswith'] = params['is_published__iendswith']
        if 'is_published__iexact' in params:
            query_params['is_published__iexact'] = params['is_published__iexact']
        if 'is_published__in' in params:
            query_params['is_published__in'] = params['is_published__in']
        if 'is_published__iregex' in params:
            query_params['is_published__iregex'] = params['is_published__iregex']
        if 'is_published__isnull' in params:
            query_params['is_published__isnull'] = params['is_published__isnull']
        if 'is_published__istartswith' in params:
            query_params['is_published__istartswith'] = params['is_published__istartswith']
        if 'is_published__lt' in params:
            query_params['is_published__lt'] = params['is_published__lt']
        if 'is_published__lte' in params:
            query_params['is_published__lte'] = params['is_published__lte']
        if 'is_published__minute' in params:
            query_params['is_published__minute'] = params['is_published__minute']
        if 'is_published__month' in params:
            query_params['is_published__month'] = params['is_published__month']
        if 'is_published__range' in params:
            query_params['is_published__range'] = params['is_published__range']
        if 'is_published__regex' in params:
            query_params['is_published__regex'] = params['is_published__regex']
        if 'is_published__search' in params:
            query_params['is_published__search'] = params['is_published__search']
        if 'is_published__second' in params:
            query_params['is_published__second'] = params['is_published__second']
        if 'is_published__startswith' in params:
            query_params['is_published__startswith'] = params['is_published__startswith']
        if 'is_published__week_day' in params:
            query_params['is_published__week_day'] = params['is_published__week_day']
        if 'is_published__year' in params:
            query_params['is_published__year'] = params['is_published__year']
        if 'enrollment_groups__isnull' in params:
            query_params['enrollment_groups__isnull'] = params['enrollment_groups__isnull']
        if 'training_unit__public__contains' in params:
            query_params['training_unit__public__contains'] = params['training_unit__public__contains']
        if 'training_unit__public__day' in params:
            query_params['training_unit__public__day'] = params['training_unit__public__day']
        if 'training_unit__public__endswith' in params:
            query_params['training_unit__public__endswith'] = params['training_unit__public__endswith']
        if 'training_unit__public__exact' in params:
            query_params['training_unit__public__exact'] = params['training_unit__public__exact']
        if 'training_unit__public__gt' in params:
            query_params['training_unit__public__gt'] = params['training_unit__public__gt']
        if 'training_unit__public__gte' in params:
            query_params['training_unit__public__gte'] = params['training_unit__public__gte']
        if 'training_unit__public__hour' in params:
            query_params['training_unit__public__hour'] = params['training_unit__public__hour']
        if 'training_unit__public__icontains' in params:
            query_params['training_unit__public__icontains'] = params['training_unit__public__icontains']
        if 'training_unit__public__iendswith' in params:
            query_params['training_unit__public__iendswith'] = params['training_unit__public__iendswith']
        if 'training_unit__public__iexact' in params:
            query_params['training_unit__public__iexact'] = params['training_unit__public__iexact']
        if 'training_unit__public__in' in params:
            query_params['training_unit__public__in'] = params['training_unit__public__in']
        if 'training_unit__public__iregex' in params:
            query_params['training_unit__public__iregex'] = params['training_unit__public__iregex']
        if 'training_unit__public__isnull' in params:
            query_params['training_unit__public__isnull'] = params['training_unit__public__isnull']
        if 'training_unit__public__istartswith' in params:
            query_params['training_unit__public__istartswith'] = params['training_unit__public__istartswith']
        if 'training_unit__public__lt' in params:
            query_params['training_unit__public__lt'] = params['training_unit__public__lt']
        if 'training_unit__public__lte' in params:
            query_params['training_unit__public__lte'] = params['training_unit__public__lte']
        if 'training_unit__public__minute' in params:
            query_params['training_unit__public__minute'] = params['training_unit__public__minute']
        if 'training_unit__public__month' in params:
            query_params['training_unit__public__month'] = params['training_unit__public__month']
        if 'training_unit__public__range' in params:
            query_params['training_unit__public__range'] = params['training_unit__public__range']
        if 'training_unit__public__regex' in params:
            query_params['training_unit__public__regex'] = params['training_unit__public__regex']
        if 'training_unit__public__search' in params:
            query_params['training_unit__public__search'] = params['training_unit__public__search']
        if 'training_unit__public__second' in params:
            query_params['training_unit__public__second'] = params['training_unit__public__second']
        if 'training_unit__public__startswith' in params:
            query_params['training_unit__public__startswith'] = params['training_unit__public__startswith']
        if 'training_unit__public__week_day' in params:
            query_params['training_unit__public__week_day'] = params['training_unit__public__week_day']
        if 'training_unit__public__year' in params:
            query_params['training_unit__public__year'] = params['training_unit__public__year']
        if 'ordering' in params:
            query_params['ordering'] = params['ordering']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_training_plans_post(self, name, owner, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_training_plans_post(name, owner, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :param str owner:  (required)
        :param str modules: 
        :param str training_unit: 
        :param str custom_thumbnail: 
        :param str deactivated: 
        :param str description: 
        :param str is_published: 
        :param str public: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'owner', 'modules', 'training_unit', 'custom_thumbnail', 'deactivated', 'description', 'is_published', 'public']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_training_plans_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v1_training_plans_post`")
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `api_v1_training_plans_post`")

        resource_path = '/api/v1/training_plans/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'modules' in params:
            form_params['modules'] = params['modules']
        if 'training_unit' in params:
            form_params['training_unit'] = params['training_unit']
        if 'custom_thumbnail' in params:
            form_params['custom_thumbnail'] = params['custom_thumbnail']
        if 'deactivated' in params:
            form_params['deactivated'] = params['deactivated']
        if 'name' in params:
            form_params['name'] = params['name']
        if 'description' in params:
            form_params['description'] = params['description']
        if 'is_published' in params:
            form_params['is_published'] = params['is_published']
        if 'public' in params:
            form_params['public'] = params['public']
        if 'owner' in params:
            form_params['owner'] = params['owner']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_training_plans_pk_get(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_training_plans_pk_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_training_plans_pk_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_training_plans_pk_get`")

        resource_path = '/api/v1/training_plans/{pk}/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_training_plans_pk_put(self, pk, name, owner, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_training_plans_pk_put(pk, name, owner, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str name:  (required)
        :param str owner:  (required)
        :param str modules: 
        :param str training_unit: 
        :param str custom_thumbnail: 
        :param str deactivated: 
        :param str description: 
        :param str is_published: 
        :param str public: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'name', 'owner', 'modules', 'training_unit', 'custom_thumbnail', 'deactivated', 'description', 'is_published', 'public']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_training_plans_pk_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_training_plans_pk_put`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v1_training_plans_pk_put`")
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `api_v1_training_plans_pk_put`")

        resource_path = '/api/v1/training_plans/{pk}/'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'modules' in params:
            form_params['modules'] = params['modules']
        if 'training_unit' in params:
            form_params['training_unit'] = params['training_unit']
        if 'custom_thumbnail' in params:
            form_params['custom_thumbnail'] = params['custom_thumbnail']
        if 'deactivated' in params:
            form_params['deactivated'] = params['deactivated']
        if 'name' in params:
            form_params['name'] = params['name']
        if 'description' in params:
            form_params['description'] = params['description']
        if 'is_published' in params:
            form_params['is_published'] = params['is_published']
        if 'public' in params:
            form_params['public'] = params['public']
        if 'owner' in params:
            form_params['owner'] = params['owner']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_training_plans_pk_delete(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_training_plans_pk_delete(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_training_plans_pk_delete" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_training_plans_pk_delete`")

        resource_path = '/api/v1/training_plans/{pk}/'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_training_plans_pk_patch(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_training_plans_pk_patch(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str modules: 
        :param str training_unit: 
        :param str custom_thumbnail: 
        :param str deactivated: 
        :param str name: 
        :param str description: 
        :param str is_published: 
        :param str public: 
        :param str owner: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'modules', 'training_unit', 'custom_thumbnail', 'deactivated', 'name', 'description', 'is_published', 'public', 'owner']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_training_plans_pk_patch" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_training_plans_pk_patch`")

        resource_path = '/api/v1/training_plans/{pk}/'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'modules' in params:
            form_params['modules'] = params['modules']
        if 'training_unit' in params:
            form_params['training_unit'] = params['training_unit']
        if 'custom_thumbnail' in params:
            form_params['custom_thumbnail'] = params['custom_thumbnail']
        if 'deactivated' in params:
            form_params['deactivated'] = params['deactivated']
        if 'name' in params:
            form_params['name'] = params['name']
        if 'description' in params:
            form_params['description'] = params['description']
        if 'is_published' in params:
            form_params['is_published'] = params['is_published']
        if 'public' in params:
            form_params['public'] = params['public']
        if 'owner' in params:
            form_params['owner'] = params['owner']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_training_plans_pk_disenroll_user_post(self, pk, name, owner, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_training_plans_pk_disenroll_user_post(pk, name, owner, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str name:  (required)
        :param str owner:  (required)
        :param str modules: 
        :param str training_unit: 
        :param str custom_thumbnail: 
        :param str deactivated: 
        :param str description: 
        :param str is_published: 
        :param str public: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'name', 'owner', 'modules', 'training_unit', 'custom_thumbnail', 'deactivated', 'description', 'is_published', 'public']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_training_plans_pk_disenroll_user_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_training_plans_pk_disenroll_user_post`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v1_training_plans_pk_disenroll_user_post`")
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `api_v1_training_plans_pk_disenroll_user_post`")

        resource_path = '/api/v1/training_plans/{pk}/disenroll_user/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'modules' in params:
            form_params['modules'] = params['modules']
        if 'training_unit' in params:
            form_params['training_unit'] = params['training_unit']
        if 'custom_thumbnail' in params:
            form_params['custom_thumbnail'] = params['custom_thumbnail']
        if 'deactivated' in params:
            form_params['deactivated'] = params['deactivated']
        if 'name' in params:
            form_params['name'] = params['name']
        if 'description' in params:
            form_params['description'] = params['description']
        if 'is_published' in params:
            form_params['is_published'] = params['is_published']
        if 'public' in params:
            form_params['public'] = params['public']
        if 'owner' in params:
            form_params['owner'] = params['owner']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
