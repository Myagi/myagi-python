    # coding: utf-8

"""
UsersApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UsersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_users_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str limit: 
        :param str offset: 
        :param str is_active: 
        :param str enrollment_groups: 
        :param str learner: 
        :param str is_active__contains: 
        :param str is_active__day: 
        :param str is_active__endswith: 
        :param str is_active__exact: 
        :param str is_active__gt: 
        :param str is_active__gte: 
        :param str is_active__hour: 
        :param str is_active__icontains: 
        :param str is_active__iendswith: 
        :param str is_active__iexact: 
        :param str is_active__in: 
        :param str is_active__iregex: 
        :param str is_active__isnull: 
        :param str is_active__istartswith: 
        :param str is_active__lt: 
        :param str is_active__lte: 
        :param str is_active__minute: 
        :param str is_active__month: 
        :param str is_active__range: 
        :param str is_active__regex: 
        :param str is_active__search: 
        :param str is_active__second: 
        :param str is_active__startswith: 
        :param str is_active__week_day: 
        :param str is_active__year: 
        :param str enrollment_groups__isnull: 
        :param str learner__learnergroups: 
        :param str learner__trainingunits: 
        :param str learner__company: 
        :param str learner__isnull: 
        :param str learner__learnergroups__area: 
        :param str learner__learnergroups__isnull: 
        :param str learner__trainingunits__isnull: 
        :param str learner__company__isnull: 
        :param str learner__learnergroups__area__manager: 
        :param str learner__learnergroups__area__isnull: 
        :param str learner__learnergroups__area__manager__isnull: 
        :param str ordering: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'is_active', 'enrollment_groups', 'learner', 'is_active__contains', 'is_active__day', 'is_active__endswith', 'is_active__exact', 'is_active__gt', 'is_active__gte', 'is_active__hour', 'is_active__icontains', 'is_active__iendswith', 'is_active__iexact', 'is_active__in', 'is_active__iregex', 'is_active__isnull', 'is_active__istartswith', 'is_active__lt', 'is_active__lte', 'is_active__minute', 'is_active__month', 'is_active__range', 'is_active__regex', 'is_active__search', 'is_active__second', 'is_active__startswith', 'is_active__week_day', 'is_active__year', 'enrollment_groups__isnull', 'learner__learnergroups', 'learner__trainingunits', 'learner__company', 'learner__isnull', 'learner__learnergroups__area', 'learner__learnergroups__isnull', 'learner__trainingunits__isnull', 'learner__company__isnull', 'learner__learnergroups__area__manager', 'learner__learnergroups__area__isnull', 'learner__learnergroups__area__manager__isnull', 'ordering']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/v1/users/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'is_active' in params:
            query_params['is_active'] = params['is_active']
        if 'enrollment_groups' in params:
            query_params['enrollment_groups'] = params['enrollment_groups']
        if 'learner' in params:
            query_params['learner'] = params['learner']
        if 'is_active__contains' in params:
            query_params['is_active__contains'] = params['is_active__contains']
        if 'is_active__day' in params:
            query_params['is_active__day'] = params['is_active__day']
        if 'is_active__endswith' in params:
            query_params['is_active__endswith'] = params['is_active__endswith']
        if 'is_active__exact' in params:
            query_params['is_active__exact'] = params['is_active__exact']
        if 'is_active__gt' in params:
            query_params['is_active__gt'] = params['is_active__gt']
        if 'is_active__gte' in params:
            query_params['is_active__gte'] = params['is_active__gte']
        if 'is_active__hour' in params:
            query_params['is_active__hour'] = params['is_active__hour']
        if 'is_active__icontains' in params:
            query_params['is_active__icontains'] = params['is_active__icontains']
        if 'is_active__iendswith' in params:
            query_params['is_active__iendswith'] = params['is_active__iendswith']
        if 'is_active__iexact' in params:
            query_params['is_active__iexact'] = params['is_active__iexact']
        if 'is_active__in' in params:
            query_params['is_active__in'] = params['is_active__in']
        if 'is_active__iregex' in params:
            query_params['is_active__iregex'] = params['is_active__iregex']
        if 'is_active__isnull' in params:
            query_params['is_active__isnull'] = params['is_active__isnull']
        if 'is_active__istartswith' in params:
            query_params['is_active__istartswith'] = params['is_active__istartswith']
        if 'is_active__lt' in params:
            query_params['is_active__lt'] = params['is_active__lt']
        if 'is_active__lte' in params:
            query_params['is_active__lte'] = params['is_active__lte']
        if 'is_active__minute' in params:
            query_params['is_active__minute'] = params['is_active__minute']
        if 'is_active__month' in params:
            query_params['is_active__month'] = params['is_active__month']
        if 'is_active__range' in params:
            query_params['is_active__range'] = params['is_active__range']
        if 'is_active__regex' in params:
            query_params['is_active__regex'] = params['is_active__regex']
        if 'is_active__search' in params:
            query_params['is_active__search'] = params['is_active__search']
        if 'is_active__second' in params:
            query_params['is_active__second'] = params['is_active__second']
        if 'is_active__startswith' in params:
            query_params['is_active__startswith'] = params['is_active__startswith']
        if 'is_active__week_day' in params:
            query_params['is_active__week_day'] = params['is_active__week_day']
        if 'is_active__year' in params:
            query_params['is_active__year'] = params['is_active__year']
        if 'enrollment_groups__isnull' in params:
            query_params['enrollment_groups__isnull'] = params['enrollment_groups__isnull']
        if 'learner__learnergroups' in params:
            query_params['learner__learnergroups'] = params['learner__learnergroups']
        if 'learner__trainingunits' in params:
            query_params['learner__trainingunits'] = params['learner__trainingunits']
        if 'learner__company' in params:
            query_params['learner__company'] = params['learner__company']
        if 'learner__isnull' in params:
            query_params['learner__isnull'] = params['learner__isnull']
        if 'learner__learnergroups__area' in params:
            query_params['learner__learnergroups__area'] = params['learner__learnergroups__area']
        if 'learner__learnergroups__isnull' in params:
            query_params['learner__learnergroups__isnull'] = params['learner__learnergroups__isnull']
        if 'learner__trainingunits__isnull' in params:
            query_params['learner__trainingunits__isnull'] = params['learner__trainingunits__isnull']
        if 'learner__company__isnull' in params:
            query_params['learner__company__isnull'] = params['learner__company__isnull']
        if 'learner__learnergroups__area__manager' in params:
            query_params['learner__learnergroups__area__manager'] = params['learner__learnergroups__area__manager']
        if 'learner__learnergroups__area__isnull' in params:
            query_params['learner__learnergroups__area__isnull'] = params['learner__learnergroups__area__isnull']
        if 'learner__learnergroups__area__manager__isnull' in params:
            query_params['learner__learnergroups__area__manager__isnull'] = params['learner__learnergroups__area__manager__isnull']
        if 'ordering' in params:
            query_params['ordering'] = params['ordering']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_post(self, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_post(email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_post`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_post`")

        resource_path = '/api/v1/users/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_csv_data_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_csv_data_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_csv_data_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/v1/users/csv_data/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_current_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_current_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_current_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/v1/users/current/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_get(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_get`")

        resource_path = '/api/v1/users/{pk}/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_put(self, pk, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_put(pk, email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_put`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_pk_put`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_pk_put`")

        resource_path = '/api/v1/users/{pk}/'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_delete(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_delete(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_delete" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_delete`")

        resource_path = '/api/v1/users/{pk}/'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_patch(self, pk, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_patch(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email: 
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :param str badge_awards: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined', 'badge_awards']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_patch" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_patch`")

        resource_path = '/api/v1/users/{pk}/'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_add_to_group_post(self, pk, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_add_to_group_post(pk, email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_add_to_group_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_add_to_group_post`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_pk_add_to_group_post`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_pk_add_to_group_post`")

        resource_path = '/api/v1/users/{pk}/add_to_group/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_admin_reset_password_post(self, pk, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_admin_reset_password_post(pk, email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_admin_reset_password_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_admin_reset_password_post`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_pk_admin_reset_password_post`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_pk_admin_reset_password_post`")

        resource_path = '/api/v1/users/{pk}/admin_reset_password/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_change_user_to_new_company_post(self, pk, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_change_user_to_new_company_post(pk, email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_change_user_to_new_company_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_change_user_to_new_company_post`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_pk_change_user_to_new_company_post`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_pk_change_user_to_new_company_post`")

        resource_path = '/api/v1/users/{pk}/change_user_to_new_company/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_register_feature_interest_post(self, pk, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_register_feature_interest_post(pk, email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_register_feature_interest_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_register_feature_interest_post`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_pk_register_feature_interest_post`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_pk_register_feature_interest_post`")

        resource_path = '/api/v1/users/{pk}/register_feature_interest/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_remove_from_group_post(self, pk, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_remove_from_group_post(pk, email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_remove_from_group_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_remove_from_group_post`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_pk_remove_from_group_post`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_pk_remove_from_group_post`")

        resource_path = '/api/v1/users/{pk}/remove_from_group/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_remove_user_from_current_company_post(self, pk, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_remove_user_from_current_company_post(pk, email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_remove_user_from_current_company_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_remove_user_from_current_company_post`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_pk_remove_user_from_current_company_post`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_pk_remove_user_from_current_company_post`")

        resource_path = '/api/v1/users/{pk}/remove_user_from_current_company/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_reset_password_post(self, pk, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_reset_password_post(pk, email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_reset_password_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_reset_password_post`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_pk_reset_password_post`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_pk_reset_password_post`")

        resource_path = '/api/v1/users/{pk}/reset_password/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def api_v1_users_pk_set_learner_group_post(self, pk, email, badge_awards, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_users_pk_set_learner_group_post(pk, email, badge_awards, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str email:  (required)
        :param str badge_awards:  (required)
        :param str username: 
        :param str first_name: 
        :param str last_name: 
        :param str groups: 
        :param str last_login: 
        :param str is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        :param str date_joined: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'email', 'badge_awards', 'username', 'first_name', 'last_name', 'groups', 'last_login', 'is_active', 'date_joined']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_users_pk_set_learner_group_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `api_v1_users_pk_set_learner_group_post`")
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `api_v1_users_pk_set_learner_group_post`")
        # verify the required parameter 'badge_awards' is set
        if ('badge_awards' not in params) or (params['badge_awards'] is None):
            raise ValueError("Missing the required parameter `badge_awards` when calling `api_v1_users_pk_set_learner_group_post`")

        resource_path = '/api/v1/users/{pk}/set_learner_group/'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}
        if 'email' in params:
            form_params['email'] = params['email']
        if 'username' in params:
            form_params['username'] = params['username']
        if 'first_name' in params:
            form_params['first_name'] = params['first_name']
        if 'last_name' in params:
            form_params['last_name'] = params['last_name']
        if 'groups' in params:
            form_params['groups'] = params['groups']
        if 'last_login' in params:
            form_params['last_login'] = params['last_login']
        if 'is_active' in params:
            form_params['is_active'] = params['is_active']
        if 'date_joined' in params:
            form_params['date_joined'] = params['date_joined']
        if 'badge_awards' in params:
            form_params['badge_awards'] = params['badge_awards']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=object,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
